
vec3 saturate(vec3 x) { return clamp(x, vec3(0.0), vec3(1.0)); }

vec2 fcToUv(in vec2 fc) { return vec2(fc / R.xy); }
vec2 fcToUvn(in vec2 fc) { return vec2 (fc - 0.5*R.xy)/max(R.x,R.y); }

highp uint packU8(mediump uvec4 a) {
    return uint( (a.x << 24)
    | (a.y << 16)
    | (a.z << 8 )
    | (a.w << 0 ) ); }
mediump uvec4 unpackU8(highp uint a) {
    return uvec4( (a & 0xFF000000u) >> 24
    , (a & 0x00FF0000u) >> 16
    , (a & 0x0000FF00u) >> 8
    , (a & 0x000000FFu) >> 0   ); }
uint packU8(  vec4  a) { return packU8(uvec4(round(clamp(a, 0., 1.)*255.))); }
vec4  unpackU8(float a) { return vec4(unpackU8(floatBitsToUint(a))) / 255.; }
uint packS8(  vec4  a) { return packU8(uvec4(round(clamp(a, -1., 1.)*127.5+127.5))); }
vec4  unpackS8(float a) { return clamp((vec4(unpackU8(floatBitsToUint(a))) - 127.5) / 127.5, -1., 1.); }

//vec4 cmyki2rgba(in vec4 cmyk){
//    vec4 c = vec4(0.0, 1.0, 1.0, 1.0)*(1.0-cmyk.r);
//    vec4 m = vec4(1.0, 0.0, 1.0, 1.0)*(1.0-cmyk.g);
//    vec4 y = vec4(1.0, 1.0, 0.0, 1.0)*(1.0-cmyk.b);
//    vec4 k = vec4(0.0, 0.0, 0.0, 1.0)*(1.0-cmyk.a);
//
//    vec4 f = c;
//    f = (1.0-f.a) * m + f.a * vec4(u(f)*u(m),1.0) * m.a + (1.0-m.a) * f;
//    f = (1.0-f.a) * y + f.a * vec4(u(f)*u(y),1.0) * y.a + (1.0-y.a) * f;
//    f = (1.0-f.a) * k + f.a * vec4(u(f)*u(k),1.0) * k.a + (1.0-k.a) * f;
//    return f;
//}

float linearDepth(float d,float zNear,float zFar)
{
    return zNear * zFar / (zFar + d * (zNear - zFar));
}


vec4 depthToClip(float depth, vec2 uv){
    float z = depth;
    return vec4( uv * 2. - 1.0, z, 1.);
}

vec4 depthToView(float depth, vec2 uv, mat4 invProj){
    vec4 clipPos = depthToClip(depth, uv);
    vec4 viewPos = invProj * clipPos;
    viewPos /= viewPos.w;
    return viewPos;
}


vec3 depthToWorld(float depth, vec2 uv, mat4 invView, mat4 invProj){
    vec4 viewPos = depthToView(depth, uv, invProj);

    vec4 worldPos = invView * viewPos;

    return worldPos.xyz;
}

vec4 worldToView(vec3 world, mat4 proj, mat4 view){
    vec4 aoP = vec4(world.xyz, 1);
    aoP = view * aoP;
    aoP = proj * aoP;
    aoP.xyz /= aoP.w;
    aoP.xy += 1.;
    aoP.xy /= 2.;
    return aoP;
}

mat4 getTranslationMatrix(vec3 pos){
    return mat4(
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    pos.x, pos.y, pos.z, 1
    );
}

// vec4 textureSmooth(texture2D tex, vec2 uv){
//     //---------------------------------------------
//     //float textureResolution = iChannelResolution[0].x;
//     vec2 textureResolution = vec2(textureSize(tex,0));
//     uv = uv*textureResolution + 0.5;
//     vec2 iuv = floor( uv );
//     vec2 fuv = fract( uv );
//     uv = iuv + fuv*fuv*(3.0-2.0*fuv); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);;
//     uv = (uv - 0.5)/textureResolution;
//     vec4 col = texture( tex, uv );
//     return col;
// }


vec2 HammersleyNorm(int i, int N) {
    // principle: reverse bit sequence of i
	uint b =  ( uint(i) << 16u) | (uint(i) >> 16u );
	b = (b & 0x55555555u) << 1u | (b & 0xAAAAAAAAu) >> 1u;
	b = (b & 0x33333333u) << 2u | (b & 0xCCCCCCCCu) >> 2u;
	b = (b & 0x0F0F0F0Fu) << 4u | (b & 0xF0F0F0F0u) >> 4u;
	b = (b & 0x00FF00FFu) << 8u | (b & 0xFF00FF00u) >> 8u;

	return vec2( i, b ) / vec2( N, 0xffffffffU );
}

// Low discrepancy on Disk 
vec2 HammersleyDisk(int i, int N) {
    vec2 h = 2.* HammersleyNorm(i, N) - 1.;
    h = h * sqrt( 1. - .5 * h*h ).yx;
    
    return pow(length(h),1.)*normalize(h);
}

float halton(int base, int index) {
	float result = 0.;
	float f = 1.;
	while (index > 0)
	{
		f = f / float(base);
		result += f * float(index % base);
		index = index / base; 
        //index = int(floor(float(index) / float(base)));
	}
	return result;
}

vec2 halton_2_3(int base, int idx) {
    float u = halton(2, idx + 1) - 0.5;
    float v = halton(3, idx + 1) - 0.5;
    return vec2(u,v);
        
        // seq[2 * i + 0] = u;
        // seq[2 * i + 1] = v;
}






    //float RNDrand(vec3 scale, float seed) {
    //    /* use the fragment position for a different seed per-pixel */
    //    return fract(sin(dot(U.xyx + seed, scale)) * 43758.5453 + seed);
    //}
    #define RGB_to_YIQ  mat3x3( 0.299 , 0.595716 , 0.211456 ,   0.587    , -0.274453 , -0.522591 ,      0.114    , -0.321263 , 0.311135 )
    #define YIQ_to_RGB  mat3x3( 1.0   , 1.0      , 1.0      ,   0.9563   , -0.2721   , -1.1070   ,      0.6210   , -0.6474   , 1.7046   )

    #define RGB_to_YUV  mat3x3( 0.299 , -0.14713 , 0.615    ,   0.587    , -0.28886  , -0.514991 ,      0.114    , 0.436     , -0.10001 )
    #define YUV_to_RGB  mat3x3( 1.0   , 1.0      , 1.0      ,   0.0      , -0.39465  , 2.03211   ,      1.13983  , -0.58060  , 0.0      )